plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
  	id 'findbugs'
    id 'checkstyle'
    id 'jdepend'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.11.3'

    // for asciidoclet, DONT SEEM TO NEED THIS
    // id 'com.github.jruby-gradle.base' version '0.1.5'
}

description = 'java examples'
sourceCompatibility = '1.8'

repositories {
    jcenter()
}

configurations {
    asciidoclet
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.13'
    //compile 'commons-io:commons-io:2.4'
    compile 'commons-cli:commons-cli:1.3.1'

  	compile 'com.h2database:h2:1.4.191'

    //TODO: logback are both needed???
    def logbakeVersion = '1.1.3'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: "$logbakeVersion"
    runtime group: 'ch.qos.logback', name: 'logback-core', version: "$logbakeVersion"

  	// needed for WalkFileTree
  	compile 'net.sf.opencsv:opencsv:2.3'
  	compile 'com.google.guava:guava:18.+'

    testCompile 'junit:junit:4.12'
    testRuntime 'org.slf4j:slf4j-nop:1.7.13'

    // asciidoclet
    asciidoclet 'org.asciidoctor:asciidoclet:1.5.2'
}

test.doLast {
  println '---------- testRuntime classpath --------------'
  configurations.testRuntime.each { println it }
}

// from: https://raw.githubusercontent.com/asciidoctor/asciidoclet/master/README.adoc
javadoc {
    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
    // options.overview = "src/main/java/overview.adoc"
    // options.addStringOption "-base-dir", "${projectDir}"
    // options.addStringOption "-attribute",
    //         "name=${project.name}," +
    //         "version=${project.version}," +
    //         "title-link=http://example.com[${project.name} ${project.version}]")
}

/*
create source & javadoc jar's
from: http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
another example: https://forgegradle.readthedocs.org/en/latest/cookbook/
*/
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

checkstyle {
   ignoreFailures = true
   showViolations = false
}

findbugs {
	ignoreFailures = true
  sourceSets = [sourceSets.main]
}

findbugsMain {
	reports {
	  xml.enabled = false
	  html.enabled = true
	}
}

jdepend {
   ignoreFailures = true
}

/*
jdependMain {
   reports {
      html.enabled = true
      text.enabled = false
   }
}
*/

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main]

    ruleSets = [
      "java-basic",
      "java-braces",
      'java-clone',
      'java-codesize',
      'java-comments',
      'java-unnecessary',
      'java-unusedcode'
    ]
    /*
    [
        "basic",
        "braces"
      ]
*/
}
